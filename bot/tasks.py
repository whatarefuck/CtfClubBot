import asyncio
from aiogram import Bot
from logging import getLogger

from utils.notifications import Notifications
from database.db import get_db
from database.user_dao import UserDAO
from database.task_dao import TaskDao

from utils.root_me import get_solved_tasks_of_student


logger = getLogger()


async def sync_education_tasks(bot: Bot):
    while True:
        with get_db() as session:
            # Fetch all users with their tasks
            dao = UserDAO(session)
            task_dao = TaskDao(session)
            notify = Notifications(bot)
            users = dao.get_all_students_with_tasks()
            for user in users:
                if user.root_me_nickname:
                    # try:
                    solved_tasks = await get_solved_tasks_of_student(
                        user.root_me_nickname
                    )
                    for task in user.tasks:
                        task.completed = task.name in solved_tasks

                        if task.completed:
                            from settings import Config

                            notify = Notifications(bot)

                            score = task_dao.score_for_tasks(task.name, user.id)

                            user.points += score
                            student_message = f" –ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É {task.name} –∏ –ø–æ–ª—É—á–∏–ª {score} –æ—á–∫–æ–≤"
                            admin_log = f" {user.username} - {user.full_name} —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É{task.name} –∏ –ø–æ–ª—É—á–∏–ª {score} –æ—á–∫–æ–≤ "
                            logger.info(admin_log)
                            await notify._say_teachers(admin_log)
                            await notify._say_student(user, student_message)


                        if not task.completed and task.is_expired and not task.violation_recorded:

                            user.lives -= 1
                            user.violations += 1
                            task.violation_recorded = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                            teacher_message = (
                                f"–ó–∞–¥–∞—á–∞ {task.name} –∏—Å—Ç–µ–∫–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ {user}."
                            )
                            logger.info(teacher_message)

                            await notify.say_about_deadline_fail(teacher_message)
                            student_message = f"–¢—ã –ø–æ—Ç–µ—Ä—è–ª 1 HP –∑–∞ –∑–∞–¥–∞—á—É {task.name}. üò¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä—å.\
                                      –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –≤ –æ–±—â–∏–π —á–∞—Ç."
                            logger.info(student_message)
                            await notify._say_student(user, student_message)

                    session.commit()
                    logger.info(f"Synced tasks for user: {user.username}")
                    # except Exception as e:
                    #     logger.error(f"Error syncing tasks for {user.username}: {e.}")
                await asyncio.sleep(60)
        await asyncio.sleep(0.1)


async def restore_student_lives():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–æ 3-—Ö."""
    try:
        with get_db() as session:
            dao = UserDAO(session)
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö "–∂–∏–≤—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (HP > 0)
            active_users = dao.get_all_active_students()

            count = 0

            for user in active_users:
                if user.lives < 3:  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
                    user.lives = 3
                    logger.info(f"–ó–¥–æ—Ä–æ–≤—å–µ {user.username} = 3")

                    count += 1

            if count > 0:
                session.commit()
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∂–∏–∑–Ω–∏ –¥–ª—è {count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            else:
                logger.info("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–π: {e}")


if __name__ == "__main__":
    asyncio.run(sync_education_tasks())
