import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from logging import getLogger
from pytz import timezone

from utils.notifications import Notifications
from database.db import get_db
from database.user_dao import UserDAO

from database.competition_dao import CompetitionDao
from utils.root_me import get_solved_tasks_of_student

import os


logger = getLogger()


async def sync_education_tasks(bot: Bot):
    while True:
        with get_db() as session:
            # Fetch all users with their tasks
            dao = UserDAO(session)
            users = dao.get_all_students_with_tasks()
            for user in users:
                if user.root_me_nickname:
                    # try:
                    solved_tasks = await get_solved_tasks_of_student(
                        user.root_me_nickname
                    )
                    for task in user.tasks:
                        task.completed = task.name in solved_tasks
                        if (
                            not task.completed and task.is_expired
                            and not task.violation_recorded
                        ):
                            user.lives -= 1
                            user.violations += 1
                            task.violation_recorded = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                            teacher_message = (
                                f"–ó–∞–¥–∞—á–∞ {task.name} –∏—Å—Ç–µ–∫–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ {user}."
                            )
                            logger.info(teacher_message)
                            notify = Notifications(bot)
                            await notify.say_about_deadline_fail(
                                teacher_message
                            )
                            student_message = (
                                f"–¢—ã –ø–æ—Ç–µ—Ä—è–ª 1 HP –∑–∞ –∑–∞–¥–∞—á—É {task.name}. üò¢ "
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è, "
                                "—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä—å. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã "
                                "–∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é "
                                "–≤ –æ–±—â–∏–π —á–∞—Ç."
                            )
                            logger.info(student_message)
                            await notify._say_student(user, student_message)

                    session.commit()
                    logger.info(f"Synced tasks for user: {user.username}")
                    # except Exception as e:
                    #     logger.error(f"Error syncing tasks for {user.username}: {e.}")
                await asyncio.sleep(60)
        await asyncio.sleep(0.1)


async def restore_student_lives():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–æ 3-—Ö."""
    try:
        with get_db() as session:
            dao = UserDAO(session)
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö "–∂–∏–≤—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (HP > 0)
            active_users = dao.get_all_active_students()

            count = 0

            for user in active_users:
                if user.lives < 3:  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
                    user.lives = 3
                    logger.info(f"–ó–¥–æ—Ä–æ–≤—å–µ {user.username} = 3")

                    count += 1

            if count > 0:
                session.commit()
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∂–∏–∑–Ω–∏ –¥–ª—è {count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            else:
                logger.info("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–π: {e}")


async def send_event_notifications(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –∑–∞ 1 –¥–µ–Ω—å –∏ –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    try:
        moscow_tz = timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        today_end = today_start + timedelta(days=1)
        tomorrow_start = today_start + timedelta(days=1)
        tomorrow_end = today_start + timedelta(days=2)

        with get_db() as session:
            dao = CompetitionDao(session)
            today_events = dao.get_events_between(today_start, today_end)
            tomorrow_events = dao.get_events_between(
                tomorrow_start, tomorrow_end
            )

            for event in today_events:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ —Å–µ–≥–æ–¥–Ω—è: {event.name}")
                notify = Notifications(bot)
                for participation in event.participations:
                    user = participation.user
                    msg = (
                        f"–°–µ–≥–æ–¥–Ω—è: {event.name} –≤ "
                        f"{event.date.strftime('%H:%M')}."
                    )
                    await notify._say_student(user, msg)

            for event in tomorrow_events:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –∑–∞–≤—Ç—Ä–∞: {event.name}")
                notify = Notifications(bot)
                for participation in event.participations:
                    user = participation.user
                    msg = (
                        f"–ó–∞–≤—Ç—Ä–∞: {event.name} –≤ "
                        f"{event.date.strftime('%H:%M')}."
                    )
                    await notify._say_student(user, msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


#if __name__ == "__main__":
#    asyncio.run(sync_education_tasks())
# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª __main__-–±–ª–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ,
# –∏ –∑–∞–ø—É—Å–∫ –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—à–∏–±–∫–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ bot.