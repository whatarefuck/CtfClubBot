from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import Message

from database.db import get_db


from database.user_dao import UserDAO
from database.models import User
leaderboard_router = Router()


@leaderboard_router.message(Command("leaderboard"))
async def leaderboard_handler(message: Message, user: User):
    with get_db() as db:
        user_dao = UserDAO(db)
        rating = user_dao.leaderboard()
        if not rating:
            await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –±–∞–ª–ª–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ—Ç.")
            return

        leaderboard_message = "üèÜ –õ–∏–¥–µ—Ä—ã:\n"
        for idx, top_user in enumerate(rating, start=1):
            leaderboard_message += f"{idx}. @{top_user.username} - {top_user.points}\n"

        # Check if current user is in the top ratings by username
        current_username = message.from_user.username
        user_in_top = any(top_user.username == current_username for top_user in rating)

        if user_in_top:
            leaderboard_message += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤ —Ç–æ–ø-20!"
        else:
            # If rating is not empty, calculate points needed
            points_needed = max(top_user.points for top_user in rating) - user.points + 1
            leaderboard_message += f"–¢–µ–±—è –Ω–µ—Ç –≤ —Ç–æ–ø–µ. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–æ {points_needed}"

    await message.answer(leaderboard_message)
