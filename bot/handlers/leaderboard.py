from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import Message
from database.db import get_db
from database.user_dao import UserDAO
from database.models import User
from logging import getLogger

logger = getLogger(__name__)

leaderboard_router = Router()


@leaderboard_router.message(Command("leaderboard"))
async def leaderboard_handler(message: Message, user: User):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º, –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Å 0 –±–∞–ª–ª–æ–≤),
    –∞ —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    with get_db() as db:
        user_dao = UserDAO(db)

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ë–î
        current_user = user_dao.get_by_id(user.id)
        if current_user is None:
            await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ.")
            return

        # –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –±–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{current_user.username} –∏–º–µ–µ—Ç {current_user.points} –±–∞–ª–ª–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –±–∞–ª–ª–∞–º–∏)
        top_rating = [u for u in user_dao.leaderboard(limit=20) if u.points > 0]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = user_dao.get_all_students()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        leaderboard_message = ["üèÜ –õ–∏–¥–µ—Ä—ã (–¢–æ–ø-20):"]
        if not top_rating:
            leaderboard_message.append("–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –±–∞–ª–ª–æ–≤ –≤ —Ç–æ–ø-20.")
        else:
            for idx, top_user in enumerate(top_rating, start=1):
                leaderboard_message.append(f"{idx}. @{top_user.username} ‚Äî {top_user.points} –±–∞–ª–ª–æ–≤")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —Å 0 –±–∞–ª–ª–æ–≤
        leaderboard_message.append("\nüìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        if not all_users:
            leaderboard_message.append("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            for user in all_users:
                leaderboard_message.append(f"@{user.username} ‚Äî {user.points} –±–∞–ª–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–æ–ø-20 (–∏ —É –Ω–µ–≥–æ > 0 –±–∞–ª–ª–æ–≤)
        in_top = any(top_user.id == current_user.id for top_user in top_rating)
        if in_top and current_user.points > 0:
            leaderboard_message.append(f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤ —Ç–æ–ø-{len(top_rating)}!")
        else:
            if current_user.points == 0:
                leaderboard_message.append(
                    "\nüòî –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –±–∞–ª–ª–æ–≤. –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"
                )
            else:
                top_score = top_rating[0].points if top_rating else 0
                needed = top_score - current_user.points + 1
                leaderboard_message.append(
                    f"\nüòî –í–∞—Å –Ω–µ—Ç –≤ —Ç–æ–ø–µ. –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ, –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å {needed} –±–∞–ª–ª(–æ–≤)."
                )

        await message.answer("\n".join(leaderboard_message))
