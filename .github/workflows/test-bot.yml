name: Test Telegram Bot with PostgreSQL (Lightweight)

on:
  pull_request:
    branches:
      - main

jobs:
  test-bot:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ctf
          POSTGRES_PASSWORD: ctf
          POSTGRES_DB: ctf
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ctf"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # Use your bot's Python version

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Wait for PostgreSQL to be ready
    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          pg_isready -h localhost -p 5432 -U ctf && break
          echo "Waiting for PostgreSQL to be ready..."
          sleep 5
        done

    # Apply SQLAlchemy migrations
    - name: Run migrations
      env:
        DATABASE_URL: postgresql://ctf:ctf@localhost:5432/ctf
      run: |
        alembic upgrade head

    # Run the bot in test mode
    - name: Run bot test
      env:
        DATABASE_URL: postgresql://ctf:ctf@localhost:5432/ctf
      run: |
        python3 bot/main.py &
        BOT_PID=$!
        sleep 10 # Allow some time for the bot to initialize
        # Add your custom test commands here
        ps -p $BOT_PID && echo "Bot is running successfully"
      shell: bash

    # Ensure the bot process is terminated
    - name: Cleanup
      if: always()
      run: |
        kill $BOT_PID || echo "No process to kill"